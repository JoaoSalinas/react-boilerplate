1- no terminal: 'yarn create next-app' e escolhemos o nome do projeto

2- deletamos a pasta /pages/api e o arquivo /pages/_app o arquivo /styles/globals.css

3- integrar com ts:
  criar um arquivo tsconfig.json na raiz
  adicionamos o ts: yarn add --dev typescript @types/react
  rodamos yarn dev para que o next preencha para nós o sconfig e edite o package json
  alteramos o strict no tsconfig em "compilerOptions"->strict, alteramos para true

4- estrutura de arquivos
  criamos uma pasta src e jogamos nossa page para dentro dela
  renomeamos o arquivo index.js para index.tsx

5- editorconfig
  Clicamos na raiz do projeto e selecionamos generate .editorconfig e colocamos as seguintes configurações nele:
  #editoconfig.org
  root = true;

  [*]
  indent_style = space
  indent_size = 2
  end_of_line = lf
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true

6- eslint
  configuração inicial:
    instalar a extenção
    npx eslint --init
    ✔ How would you like to use ESLint? · problems
    ✔ What type of modules does your project use? · esm
    ✔ Which framework does your project use? · react
    ✔ Does your project use TypeScript? · Yes
    ✔ Where does your code run? · browser
    ✔ What format do you want your config file to be in? · JSON
    The config that you've selected requires the following dependencies:
    eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest
    ✔ Would you like to install them now with npm? · No (vamos instalar com yarn)

    yarn add --dev eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest

  Instalação de plugins extras:
    React Hooks:
      yarn add --dev eslint-plugin-react-hooks
      No arquivo do eslint adicionamos em plugins:
        "react-hooks"
      e em rules:
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warning"
    Prop Types (Como vamos usar ts não faz sentido)
      "react/prop-types": "off"
    Next ja importa o React globalmente, então não queremos aviso de "falta" de importação dele:
      "react/react-in-jsx-scope": "off"
    Habilita inferências implicitas de tipagem:
      "@typescript-eslint/explicit-module-boundary-types": "off"
  Adição de versão do react (apos o env):
    "settings": {
      "react": {
        "version" : "detect"
      }
    },
  Criamos um script para o lint no nosso package.json:
    "lint": "eslint src"


Prettier
  yarn add --dev exact prettier
  criamos na raiz um arquivo chamado .prettierrc com
    {
    "trailingComma": "none",
    "semi" : false,
    "singleQuote": true
    }
  eslint plugin prettier:
    yarn add --dev eslint-plugin-prettier eslint-config-prettier

    No arquivo .eslintrc, na parte de extends adicionamos:
      "plugin:prettier/recommended"
  Na raiz do projeto vamos criar uma pasta chamada .vscode e dentro dela um arquivo settings.json, dentro desse arquivo colocamos:
    {
      "editor.formatOnSave": false,
      "editor.codeActionsOnSave" : {
        "source.fixAll.eslint": true
      }
    }


  git hooks:
    husky:
      yarn add husky --dev
      yarn husky init && yarn
      alteramos no nosso script "lint": "eslint src --max-warnings=0"
    lint-staged:
      yarn add lint-staged --dev
      no package.json, adicionamos abaixo dos scripts:
      "lint-staged": {
        "src/**/*": [
          "yarn lint --fix"
        ]
      },
    No arquivo .husky/pre-commit, removemos o npm jest e colocamos yarn lint







